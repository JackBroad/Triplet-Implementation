module test_regression
  use mpi
  use mpi_variables
  use triplet_mod
  use funit
  implicit none
  double precision:: regression_tolerance=1e-9

contains

  @test
  subroutine initialise_my_mpi()

    call MPI_INIT(ierror)
    call MPI_COMM_SIZE(MPI_COMM_WORLD, clusterSize, ierror)
    call MPI_COMM_RANK(MPI_COMM_WORLD, processRank, ierror)

    @assertEqual(root, 0 ,'Initialisation')
  end subroutine initialise_my_mpi
  !===========================================================================================



  @test
  subroutine test_JobsPerNode()
    integer:: nDist=3, nProc=1, nTrips=1
    integer:: distsPerProc, tripsPerProc


    if( processRank == root ) then
       print *,'========================Regression tests============================'

       call getDistsAndTripletsPerProcNonAdd(nDist,nTrips,nProc,distsPerProc,tripsPerProc)
       @assertEqual(distsPerProc, 3,'Distances per processor #1')
       @assertEqual(tripsPerProc, 1,'Triplets per processor #1')


       !Build test!
       nDist=6
       nProc=2
       nTrips=4

       !Run calculation
       call getDistsAndTripletsPerProcNonAdd(nDist,nTrips,nProc,distsPerProc,tripsPerProc)

       ! check output
       @assertEqual(distsPerProc, 3 ,'Distances per processor #2')
       @assertEqual(tripsPerProc, 2,'Triplets per processor #2')
    endif

  end subroutine test_JobsPerNode



  @test
  subroutine test_initialise()
    implicit none
    double precision, allocatable:: posAt(:,:), alpha(:)
    double precision, allocatable:: trainData(:,:)
    double precision:: hyperParams(3) 
    integer:: N_tp, nArgs, N_a, N_tri, udSize

    double precision:: hyperParams_Expected(3)


    if( processRank == root ) then

       hyperParams_Expected(1:3) =  (/ 0.10109332178237054d0,5.0651896159484985d-5, 1.2319522830243570d-15 /)

       call initialise(posAt, trainData, alpha, hyperParams, N_tp, nArgs, N_a, N_tri, udSize)

       @assertEqual(N_tp, 337,'Test initialise: N_tp')
       @assertEqual(hyperParams, hyperParams_Expected,   regression_tolerance,'hyperparameters')

    endif


  end subroutine test_initialise


  !===========================================================================================
  @test
  subroutine test_finalize()
    call MPI_FINALIZE(ierror)
  end subroutine test_finalize



end module test_regression
