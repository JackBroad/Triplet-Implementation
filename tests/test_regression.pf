module test_regression
  use mpi
  use pbcAndMic_variables
  use mpi_variables
  use dataStructure_variables
  use triplet_mod
  use tmpi_calcFullSimBoxEnergy_mod
  use tmpi_calcAtomMoveEnergy_mod
  use GP_Variables
  use global_Flags, only: textOutput
  use energiesData_Module, only: energiesData
  use positionData_Module, only: positionData
  use updateData
  use initialise_Module
  use funit
  use fullBoxModule
  use atomMoveModule
  implicit none

  double precision :: regression_tolerance=1e-9, low_tol=5e-6
  double precision :: E_tol=3e-5
  double precision, allocatable :: posAt(:,:), Xd(:,:)
  double precision, allocatable :: expoData(:,:,:)
  integer, allocatable :: disMat(:,:), ij
  integer :: changedTriplets(3,6), tripIndex(6)
  integer :: n_tri, n_at, n_dist, move

contains

  @test
  subroutine initialise_my_mpi()

    Character(len=300) :: hyperParametersFile = 'hyperParam.txt'
    Character(len=300) :: alphaFile = 'smallAlpha.txt'
    Character(len=300) :: trainingSetFile = 'smallTrainingSet.txt'

    textOutput = .false.
    
    call MPI_INIT(ierror)
    call MPI_COMM_SIZE(MPI_COMM_WORLD, clusterSize, ierror)
    call MPI_COMM_RANK(MPI_COMM_WORLD, processRank, ierror)
    call initialise_GP_NonAdd( hyperParametersFile, alphaFile, trainingSetFile )

    ! Set up shared memory
    call MPI_COMM_SPLIT_TYPE(MPI_COMM_WORLD, MPI_COMM_TYPE_SHARED, &
                             0, MPI_INFO_NULL, hostComm, ierror)
    call MPI_COMM_SIZE(hostComm, sharedSize, ierror)
    call MPI_COMM_RANK(hostComm, hostRank, ierror)

    @assertEqual(root, 0 ,'Initialisation')
  end subroutine initialise_my_mpi
  !===========================================================================================



  @test
  subroutine test_JobsPerNode()
    integer:: nDist=3, nProc=1, nTrips=1
    integer:: distsPerProc, tripsPerProc


    if( processRank == root ) then
       print *,'========================Regression tests============================'

       call getDistsAndTripletsPerProcNonAdd(nDist,nTrips,nProc,distsPerProc,tripsPerProc)
       @assertEqual(distsPerProc, 3,'Distances per processor #1')
       @assertEqual(tripsPerProc, 1,'Triplets per processor #1')


       !Build test!
       nDist=6
       nProc=2
       nTrips=4

       !Run calculation
       call getDistsAndTripletsPerProcNonAdd(nDist,nTrips,nProc,distsPerProc,tripsPerProc)

       ! check output
       @assertEqual(distsPerProc, 3 ,'Distances per processor #2')
       @assertEqual(tripsPerProc, 2,'Triplets per processor #2')

    end if

  end subroutine test_JobsPerNode



  @test
  subroutine test_initialise()
    implicit none
    character(len=40) :: name='AtomicPositionsTest.txt'
    double precision:: hyperParams_Ex(3), posAt_Ex(3,3)

    hyperParams_Ex(1:3) =  (/ 0.10109332178237054d0, 5.0651896159484985d-5, &
                            1.2319522830243570d-15 /)
    posAt_Ex(1,1:3) = (/ 2d0, 2d0, 2d0/)
    posAt_Ex(2,1:3) = (/ 4.598076211353316d0, 2d0, 0.5d0 /)
    posAt_Ex(3,1:3) = (/ 4.598076211353316d0, 2d0, 3.5d0 /)

    call initialise_Positions(name, posAt,n_at)
    call initialise_Variables(n_at, n_tri,n_dist)

    if( processRank == root ) then

       @assertEqual(N_tp, 3, 'Test initialise: no. of TPs')
       @assertEqual(hyperParams, hyperParams_Ex, regression_tolerance, 'Test initialise: hyperparameters')
       @assertEqual(n_at, 3, 'Test initialise: no. of atoms')
       @assertEqual(nArgs, 3, 'Test initialise: no. of arguments')
       @assertEqual(n_tri, 1, 'Test initialise: no. of triplets')
       @assertEqual(n_dist, 3, 'Test initialise: no. of distances in total')
       @assertEqual(posAt, posAt_Ex, regression_tolerance, 'Test initialise: atomic positions')

    end if

  end subroutine test_initialise

  @test
  subroutine test_Xdg()
    implicit none
    integer, allocatable :: dummy(:,:)
    double precision :: Xdg(n_at,n_at), Xdg_Ex(n_at,n_at), ud_Ex(3)
    double precision, allocatable :: upperDiag(:)

    call makeXdg(n_at,posAt, Xdg)
    call makeUDdgNonAdd(n_at,n_dist,Xdg, upperDiag,dummy)
    deallocate(posAt)

    if( processRank == root ) then

      Xdg_Ex(1,1:n_at) = (/ 0d0, (1d0/3d0), (1d0/3d0) /)
      Xdg_Ex(2,1:n_at) = (/ (1d0/3d0), 0d0, (1d0/3d0) /)
      Xdg_Ex(3,1:n_at) = (/ (1d0/3d0), (1d0/3d0), 0d0 /)

      @assertEqual(Xdg, Xdg_Ex, regression_tolerance, 'Test X_dg: delta-gamma matrix')

      ud_Ex = (/ (1d0/3d0), (1d0/3d0), (1d0/3d0) /)

      @assertEqual(upperDiag, ud_Ex, regression_tolerance, 'Test X_dg: upper diagonal')

    end if

  end subroutine test_Xdg

  @test
  subroutine test_disIntMat()
    implicit none
    integer :: disMat_Ex(n_at,n_at)

    disMat_Ex(1,1:n_at) = (/ 0, 1, 2 /)
    disMat_Ex(2,1:n_at) = (/ 1, 0, 3 /)
    disMat_Ex(3,1:n_at) = (/ 2, 3, 0 /)

    call makeDisIntMatNonAdd(n_at, disMat)

    if( processRank == root ) then

      @assertEqual(disMat, disMat_Ex, 'Test disIntMat')

    end if

  end subroutine test_disIntMat

  @test
  subroutine test_triMat()
    implicit none
    integer :: nTri=4, nAt=4
    integer, allocatable :: triMat_Ex(:,:), triMatrix(:,:)

    allocate(triMatrix(nArgs,nTri),triMat_Ex(nArgs,nTri))

    if( processRank == 0 ) then

      triMat_Ex(1:3,1) = (/1,2,3/)
      triMat_Ex(1:3,2) = (/1,2,4/)
      triMat_Ex(1:3,3) = (/1,3,4/)
      triMat_Ex(1:3,4) = (/2,3,4/)

      triMatrix = makeTripletMatrix(nAt,nTri)

      @assertEqual(triMatrix, triMat_Ex, 'Test triplet matrix')

    end if

  end subroutine test_triMat


  @test
  subroutine test_exp_calc()
    implicit none
    integer :: nDists=3
    double precision :: expSlice_Ex(nArgs,3)
    double precision :: expSlice(nArgs,3), dists(3)

    allocate(expoData(N_tp,nArgs,3))

    ! All distances in test triplet are 3 A
    dists = (/ 1d0/3d0,1d0/3d0,1d0/3d0 /)

    ! Pre-calculated exponenitals for dists with first TP
    expSlice_Ex(1,:) = (/ 0.5039746,0.5039746,0.5039746 /)
    expSlice_Ex(2,:) = (/ 0.2165715,0.2165715,0.2165715 /)
    expSlice_Ex(3,:) = (/ 0.1450487,0.1450487,0.1450487 /)

    ! Calculate exponentials w/ appropriate subroutine
    call calculateExponentialsNonAdd(nDists,N_tp,nArgs,trainData,hyperParams(1), &
                                     dists, expoData)

    ! Take slice of expoData which has exps with first TP
    expSlice = expoData(1,:,:)

    if( processRank == root) then

      @assertEqual(expSlice, expSlice_Ex, low_tol, 'Test exponential calc')

    end if

  end subroutine test_exp_calc


  @test
  subroutine test_triplet_energies()
    implicit none
    integer :: trip(3,1), N_p=6
    double precision :: U_Ex(1), U(1)
    type (positionData) :: posDataStruct
    type (energiesData) :: enDataStruct

    ! Allocate necessary arrays in data structures
    allocate(enDataStruct%interatomicDistances(3,3),enDataStruct%distancesIntMat(3,3))
    allocate(posDataStruct%posArray(3,3))

    ! Fill the arrays of distances and corresponding integer labels of the distances
    enDataStruct%interatomicDistances(1,1:3) = 1d0/3d0
    enDataStruct%interatomicDistances(2,1:3) = 1d0/3d0
    enDataStruct%interatomicDistances(3,1:3) = 1d0/3d0
    enDataStruct%distancesIntMat(1,2) = 1
    enDataStruct%distancesIntMat(1,3) = 2
    enDataStruct%distancesIntMat(2,3) = 3

    ! Fill the array of positions
    posDataStruct%posArray(1,:) = (/ 1d0,1d0,0d0 /)
    posDataStruct%posArray(2,:) = (/ 4d0,1d0,0d0 /)
    posDataStruct%posArray(3,:) = (/ 2.5d0,3.598d0,0d0 /)
    posDataStruct%N_distances = 3

    Rcut = 0.25

    U_Ex(1) = 68.776748653803210
    trip(:,1) = (/ 1,2,3 /)

    call tripletEnergiesNonAdd(trip,1,N_tp,N_p,nArgs,Perm, &
                               posDataStruct,expoData,alpha, &
                               hyperParams(2),enDataStruct, U)

    if( processRank == root) then
      @assertEqual(U, U_Ex, low_tol, 'Test non-add energy single')
    end if

  end subroutine test_triplet_energies


  @test
  subroutine test_checkTripletDistsMIC()
    implicit none
    integer :: alpha=1, beta=2, gamma=3
    logical :: actualRes
    double precision :: dists(3)
    type (positionData) :: posDataStruct

    ! Set positions
    allocate(posDataStruct%posArray(3,3))
    posDataStruct%posArray(1,:) = (/ 1d0,1d0,0d0 /)
    posDataStruct%posArray(2,:) = (/ 4d0,1d0,0d0 /)
    posDataStruct%posArray(3,:) = (/ 2.5d0,3.598d0,0d0 /)

    ! Set dists, cut-off value and expected result of check
    dists = (/ 1d0/3d0,1d0/3d0,1d0/3d0 /)
    sideLength = 8d0
    Rcut = 1d0/4d0

    ! Call function; should return true this time
    actualRes = checkTripletDistsUnderMIC(dists,posDataStruct,alpha,beta,gamma)
    if( processRank .eq. root) then
      @assertTrue((actualRes .eqv. .true.),'Check energy is calculated when all dists below R_cut')
    end if

    ! Set new positions and dists
    posDataStruct%posArray(1,:) = (/ 1d0,1d0,0d0 /)
    posDataStruct%posArray(2,:) = (/ 5.1d0,1d0,0d0 /)
    posDataStruct%posArray(3,:) = (/ 2.5d0,3.598d0,0d0 /)
    dists = (/ 1d0/4.1d0,1d0/3.676d0,1d0/3d0 /)

    ! Call function; should return false as r_12>r_cut
    actualRes = checkTripletDistsUnderMIC(dists,posDataStruct,alpha,beta,gamma)
    if( processRank .eq. root) then
      @assertFalse((actualRes .eqv. .true.),'Check energy is not calculated when one dist above R_cut')
    end if

    ! Set new positions and dists
    posDataStruct%posArray(1,:) = (/ 2d0,1d0,0d0 /)
    posDataStruct%posArray(2,:) = (/ 3.9d0,1d0,0d0 /)
    posDataStruct%posArray(3,:) = (/ 6.1d0,1d0,0d0 /) ! -1.9
    dists = (/ 1/1.9d0,1/3.9d0,1/2.2d0 /)

    ! Call function; should return false as r_13>r_cut only under specific MIC position
    actualRes = checkTripletDistsUnderMIC(dists,posDataStruct,alpha,beta,gamma)
    if( processRank .eq. root) then
      @assertFalse((actualRes .eqv. .true.),'Check energy is not calculated when one dist above R_cut out of MIC')
    end if

  end subroutine test_checkTripletDistsMIC


  @test
  subroutine test_cluster_energies_and_move()
    implicit none
    character(len=40) :: name='AtomicPositions5Test.txt'
    double precision :: fullEnergy, fullEnergy_Ex, tripDist(3,10)
    double precision :: moveEnergy, moveEnergy_Ex
    double precision :: expectedPosition(3)
    logical :: seed=.true.
    integer :: expectedMove

    !****** Create a simulation box and test that total energy is correct**********
    fullEnergy = getSimBoxEnergy(name)
    fullEnergy_Ex = getExpectedSimBoxEnergy(tripDist)
   
    !================Test==================== 
    if( processRank == root) then
        @assertEqual( fullEnergy, fullEnergy_Ex, E_tol, 'Test full non-add energy')
    end if

    !*************** Now move an atom and test the revised energy*****************
    moveEnergy = getAtomMoveEnergy(1d0,seed)    
    moveEnergy_Ex = getExpectedAtomMoveEnergy(tripDist)
    expectedPosition = getExpectedPosition(move)
    expectedMove = 2

    !================Test====================
    ! Compare the two sets of triplet energies
    !Test that 'move' has the expected value
    !Test that proposed configuration of moved atom is as expected
    if( processRank == root) then
      @assertEqual( moveEnergy, moveEnergy_Ex, E_tol, 'Test atom move energy')
      @assertEqual( move, expectedMove, 'Test which atom has moved')
      @assertEqual( proposedPositionData%posArray(move,:), expectedPosition, low_tol, 'Test where atom has moved to')
    end if

  end subroutine test_cluster_energies_and_move

  @test
  subroutine test_pbc_move()
    implicit none
    double precision :: expectedPosition(3)
    logical :: seed=.true.
    integer :: expectedMover=2, actualMover

    ! Set-up move by varying actual positionas needed and making expected pos the same initially
    proposedPositionData%posArray(expectedMover,2) = 1d0 ! Make small so goes -ve when moved
    expectedPosition = proposedPositionData%posArray(expectedMover,:)
    
    ! Do move to change actual pos in proposedPositionData%posArray
    call initialise_move(50d0,seed, actualMover)

    ! Mimic move in expectedPosition vector (move is reproducible as seed is set)
    expectedPosition(1) = expectedPosition(1) + 20.157690488974723 - sideLength
    expectedPosition(2) = expectedPosition(2) - 2.5078632743263385 + sideLength
    expectedPosition(3) = expectedPosition(3) + 8.7637927150533308

    ! Test that the correct atom is moved to the correct place
    if( processRank == root) then
      @assertEqual( actualMover,expectedMover, 'Test which atom has moved')
      @assertEqual( proposedPositionData%posArray(actualMover,:), expectedPosition, low_tol, 'Test where atom has moved to')
    end if

  end subroutine test_pbc_move

  @test
  subroutine test_v_setup()
    implicit none
    integer :: nP, nD=11, max, re, max_Ex, re_Ex
    integer, allocatable :: c(:), s(:), c_Ex(:), s_Ex(:)

    nP = 3
    allocate(c(nP),s(nP),c_Ex(nP),s_Ex(nP))

    max_Ex = 3
    re_Ex = 5

    call getNPerProcNonAdd(nD,nP, max,re)

    if( processRank == root) then

      @assertEqual(max, max_Ex, 'Test v setup max elements #1')
      @assertEqual(re, re_Ex, 'Test v setup re elements #1')

    end if

    c_Ex = (/ 3,3,5 /)
    s_Ex = (/ 0,3,6 /)

    call getVarrays(nP,max,re, c,s)

    if( processRank == root) then

      @assertEqual(c, c_Ex, 'Test v setup scounts #1')
      @assertEqual(s, s_Ex, 'Test v setup displs #1')

    end if

    deallocate(c,s,c_Ex,s_Ex)

    nP = 6
    allocate(c(nP),s(nP),c_Ex(nP),s_Ex(nP))

    max_Ex = 1
    re_Ex = 6

    call getNPerProcNonAdd(nD,nP, max,re)

    if( processRank == root) then

       @assertEqual(max, max_Ex, 'Test v setup max elements #2')
       @assertEqual(re, re_Ex, 'Test v setup re elements #2')

    end if

    c_Ex = (/ 1,1,1,1,1,6 /)
    s_Ex = (/ 0,1,2,3,4,5 /)

    call getVarrays(nP,max,re, c,s)

    if( processRank == root) then

      @assertEqual(c, c_Ex, 'Test v setup scounts #2')
      @assertEqual(s, s_Ex, 'Test v setup displs #2')

    end if

    deallocate(c,s,c_Ex,s_Ex)

  end subroutine test_v_setup

  @test
  subroutine test_exp_extract()
    implicit none
    character(len=40) :: name='AtomicPositions5.txt'
    integer :: nAt, mover, nTri, nDist, i
    integer, allocatable :: indices(:,:), ind_Ex(:,:)
    double precision, allocatable :: position(:,:)
    double precision, allocatable :: dists(:), dis_Ex(:)

    call initialise_Positions(name, position,nAt)
    call initialise_Variables(nAt, nTri,nDist)

    allocate(indices(nAt-1,2),ind_Ex(nAt-1,2))
    allocate(dists(nAt-1),dis_Ex(nAt-1))
    allocate(Xd(nAt,nAt))

    call makeXdg(nAt,position, Xd)

    ! Claim to have moved atom 3; this should change 13, 23, 34, 35
    mover = 3
    call extractChangedExps(nAt,mover,Xd, indices,dists)

    ind_Ex(1,1) = 1
    ind_Ex(1,2) = 3
    ind_Ex(2,1) = 2
    ind_Ex(2,2) = 3
    ind_Ex(3,1) = 3
    ind_Ex(3,2) = 4
    ind_Ex(4,1) = 3
    ind_Ex(4,2) = 5

    do i = 1, nAt-1

      dis_Ex(i) = Xd(ind_Ex(i,1),ind_Ex(i,2))

    end do

    if( processRank == root) then

      @assertEqual(indices, ind_Ex, 'Test exp extraction')
      @assertEqual(dists, dis_Ex, regression_tolerance, 'Test exp extraction')

    end if

    deallocate(indices,ind_Ex,dists,dis_Ex)

  end subroutine test_exp_extract

  @test
  subroutine test_triPerAt()
    implicit none
    integer :: nAt=7, n, n_Ex

    n = getTriPerAtom(nAt)

    n_Ex = 15

    if( processRank == root) then

      @assertEqual(n, n_Ex, 'Test N triplets changed per move')

    end if

  end subroutine test_triPerAt

  @test
  subroutine test_getChangedTripletsAndDists()
    implicit none
    integer :: tInd_Ex(3,6), cInd_Ex(6)

    move = 1
    proposedPositionData%N_changed_triplets = 6
    call getChangedTriplets(move, changedTriplets,tripIndex)

    tInd_Ex(:,1) = (/ 1,2,3 /)
    tInd_Ex(:,2) = (/ 1,2,4 /)
    tInd_Ex(:,3) = (/ 1,2,5 /)
    tInd_Ex(:,4) = (/ 1,3,4 /)
    tInd_Ex(:,5) = (/ 1,3,5 /)
    tInd_Ex(:,6) = (/ 1,4,5 /)

    cInd_Ex = (/ 1,2,3,4,5,6 /)

    if( processRank == root) then
      @assertEqual(changedTriplets, tInd_Ex, 'Test changed triplets')
      @assertEqual(tripIndex, cInd_Ex, 'Test changed dist indices')
    end if

  end subroutine test_getChangedTripletsAndDists

  @test
  subroutine test_getNdistsPerProc
    integer :: nDistVec(clusterSize), nDistVecEx(clusterSize), nDists

    nDists = getNdistsPerProcFullBox()
    if (clusterSize == 1) then
      nDistVec = (/ nDists /)
    else
      call MPI_gather(nDists, 1, MPI_INT, nDistVec, 1, MPI_INT, root, MPI_COMM_WORLD, ierror)
    end if 

    if (clusterSize == 1) then
      nDistVecEx = (/ 10 /)
    else if (clusterSize == 2) then
      nDistVecEx = (/ 5, 5 /)
    else if (clusterSize == 3) then
      nDistVecEx = (/ 3, 3, 4 /)
    else if (clusterSize == 4) then
      nDistVecEx = (/ 3, 3, 2, 2 /)
    else if (clusterSize == 5) then
      nDistVecEx = (/ 2, 2, 2, 2, 2 /)
    else if (clusterSize == 6) then
      nDistVecEx = (/ 1, 1, 2, 2, 2, 2 /)
    else if (clusterSize == 7) then
      nDistVecEx = (/ 1, 1, 1, 1, 2, 2, 2/)
    else if (clusterSize == 8) then
      nDistVecEx = (/ 1, 1, 1, 1, 1, 1, 2, 2/)
    end if

    if( processRank == root) then
      @assertEqual(nDistVec, nDistVecEx, 'Test no. of dists per proc')
    end if
  end subroutine test_getNdistsPerProc

  @test
  subroutine test_distributeDistances
    implicit none
    integer :: nDists, nDistVec(clusterSize), displace(clusterSize), i
    double precision :: dummy
    integer, allocatable :: allInds(:,:)
    double precision, allocatable :: distVec(:), distVecEx(:)
    double precision, allocatable :: partDistVec(:), allDist(:)
    Character(len=300) :: positionFile = 'AtomicPositions5.txt'

    ! Set up simulation box
    currentPositionData = initialise_positionDataStruct(positionFile)
    dummy = tmpi_calcFullSimBoxEnergy()
    allocate(distVec(currentPositionData%N_distances))
    allocate(distVecEx(currentPositionData%N_distances))

    ! Find no. of dists per proc and build vector showing this value for each proc
    nDists = getNdistsPerProcFullBox()
    if (clusterSize == 1) then
      nDistVec = (/ nDists /)
    else
      call MPI_gather(nDists, 1, MPI_INT, nDistVec, 1, MPI_INT, root, MPI_COMM_WORLD, ierror)
    end if

    ! Build displacement vector for later gatherv call
    displace(1) = 0
    do i = 2, clusterSize, 1
      displace(i) = sum(nDistVec(1:i-1))
    end do

    ! Build a vector of all interatomic dists
    call makeUDdgNonAdd(currentPositionData%N_a,currentPositionData%N_distances, &
                        currentEnergyData%interatomicDistances, allDist,allInds)

    ! Find the dists assigned to each proc
    allocate(partDistVec(nDists))
    partDistVec = distributeDistances(nDists,allDist)

    ! Collect all of these distances into a single vector, in which the dists are ordered
    ! by the procs to which they are assigned
    call MPI_gatherv(partDistVec,nDists,MPI_DOUBLE_PRECISION,distVec,nDistVec,displace,&
                     MPI_DOUBLE_PRECISION,root,MPI_COMM_WORLD,ierror)
    distVec = distVec*100d0

    ! Select an expected vector based on the total number of procs used (up to 4)
    if (clusterSize == 1) then
      distVecEx = (/ 3.4422177507278662,3.4129389703212512,3.8598066910201373, &
                     3.8360848167972757,3.9600475658026851,3.6057911075566551, &
                     12.675240005791111,4.9530743964810102,4.6478272173744173, &
                     3.5291477340161428 /)
    else if (clusterSize == 2) then
      distVecEx = (/ 3.4422177507278662,3.8360848167972757,3.9600475658026851, &
                     4.9530743964810102,4.6478272173744173,3.4129389703212512, &
                     3.8598066910201373,3.6057911075566551,12.675240005791111, &
                     3.5291477340161428 /)
    else if (clusterSize == 3) then
      distVecEx = (/ 3.4422177507278662,3.6057911075566551,12.675240005791111, &
                     3.4129389703212512,3.9600475658026851,4.9530743964810102, &
                     3.8598066910201373,3.8360848167972757,4.6478272173744173, &
                     3.5291477340161428/)
    else if (clusterSize == 4) then
      distVecEx = (/ 3.4422177507278662,4.9530743964810102,4.6478272173744173, &
                     3.4129389703212512,12.675240005791111,3.5291477340161428, &
                     3.8598066910201373,3.6057911075566551,3.8360848167972757, &
                     3.9600475658026851 /)
    end if

    if (processRank == root) then
      @assertEqual(distVec,distVecEx,low_tol, 'Test distribution of distances')
    end if
    deallocate(distVec,distVecEx,allDist,partDistVec)
  end subroutine test_distributeDistances


  ! NOTE THAT ALL EXPECTED ENERGIES IN THE FOLLOWING TEST WERE OBTAINED FROM
  ! THE MAIN CODE WITH THE 'SMALL' FILES FOR ALPHA AND THE TPS USED TO INIT-
  ! IALISE THE GP
  @test
  subroutine test_energy_at_varied_Rcut()
    implicit none
    character(len=40) :: name='AtomicPositions100SL=18.txt'
    integer, parameter :: dp = SELECTED_REAL_KIND(15)
    real(dp) :: expEnergy
    double precision :: calcEnergy

    ! Get energy of sim. box with Rcut = L/2
    currentPositionData = initialise_positionDataStruct(name)
    calcEnergy = tmpi_calcFullSimBoxEnergy()
    expEnergy = -2731545.8830658090_dp

    if( processRank == root) then
        @assertEqual( calcEnergy, expEnergy, E_tol, 'reg. test for Rcut=L/2')
    end if

    ! Get energy of sim. box with Rcut = L/3
    expEnergy = 164016.06888115572_dp
    currentPositionData = initialise_positionDataStruct(name)
    Rcut = sideLength/3d0
    Rcut = 1d0/Rcut
    calcEnergy = tmpi_calcFullSimBoxEnergy()

    ! Run test
    if( processRank == root) then
        @assertEqual( calcEnergy, expEnergy, E_tol, 'reg. test for Rcut=L/3')
    end if

    ! Get energy of sim. box with Rcut = L/4
    expEnergy = 22111.252512911848_dp
    currentPositionData = initialise_positionDataStruct(name)
    Rcut = sideLength/4d0
    Rcut = 1d0/Rcut
    calcEnergy = tmpi_calcFullSimBoxEnergy()

    ! Run test
    if( processRank == root) then
        @assertEqual( calcEnergy, expEnergy, E_tol, 'reg. test for Rcut=L/4')
    end if

    ! Get energy of sim. box with Rcut = L/5
    expEnergy = 962.20097527586915_dp
    currentPositionData = initialise_positionDataStruct(name)
    Rcut = sideLength/5d0
    Rcut = 1d0/Rcut
    calcEnergy = tmpi_calcFullSimBoxEnergy()

    ! Run test
    if( processRank == root) then
        @assertEqual( calcEnergy, expEnergy, E_tol, 'reg. test for Rcut=L/5')
    end if
  end subroutine test_energy_at_varied_Rcut

  !===========================================================================================
  @test
  subroutine test_finalize()
    call MPI_WIN_FREE(win,ierror)
    call MPI_FINALIZE(ierror)
  end subroutine test_finalize


  double precision function getSimBoxEnergy(name)
    implicit none
    Character(len=300) :: name

    currentPositionData = initialise_positionDataStruct(name)
    getSimBoxEnergy = tmpi_calcFullSimBoxEnergy()
  return
  end function getSimBoxEnergy


  double precision function getExpectedSimBoxEnergy(tripDist)
    implicit none
    integer :: triplets(3,10), i
    double precision :: tripDist(3,10), tripEnergies_Ex(10)

    triplets = makeTripletMatrix(5,10)

    call findTripletDistances(currentPositionData%N_a,currentPositionData%N_tri,triplets, &
                              currentEnergyData%interatomicDistances, tripDist)

    do i = 1, currentPositionData%N_tri
      calculate = checkTripletDistsUnderMIC(tripDist(:,i),currentPositionData,triplets(1,i),triplets(2,i),triplets(3,i))
      tripEnergies_Ex(i) = energyCheckCalc(tripDist(:,i)) ! Energies of each triplet
      if (calculate .eqv. .false.) then
        tripEnergies_Ex(i) = 0d0
      end if
    end do

    getExpectedSimBoxEnergy = sum(tripEnergies_Ex)

  return
  end function getExpectedSimBoxEnergy


  double precision function getAtomMoveEnergy(dist,seed)
    implicit none
    double precision, intent(in) :: dist
    logical, intent(in) :: seed

    call initialise_Move(dist,seed, move) !! Remove - move now chosen outside function

    !!! Create a new data structure that contains moved atom number and it's new position
    ! Broadcast new atomic positions - should be initialise move but couldn't due to MPI errors
    call MPI_Bcast(move, 1, MPI_INT, root, MPI_COMM_WORLD, ierror)
    call MPI_Bcast(proposedPositionData%posArray(move,1:3), 3, MPI_DOUBLE_PRECISION, root, &
                   MPI_COMM_WORLD, ierror)

    ! Calculate changed energies using tmpi code
    getAtomMoveEnergy = tmpi_calcAtomMoveEnergy(move)

  return
  end function getAtomMoveEnergy


  double precision function getExpectedAtomMoveEnergy(tripDist)
    implicit none
    integer :: triplets(3,10), i
    double precision :: tripDist(3,10), oldTripDist(3,10), newTripEnergies_Ex(10)
    double precision :: oldTripEnergies_Ex(10), energy_Ex, oldEnergy_Ex

    triplets = makeTripletMatrix(5,10)

    call findTripletDistances(proposedPositionData%N_a,proposedPositionData%N_tri,triplets, &
                              proposedEnergyData%interatomicDistances, tripDist)
    call findTripletDistances(currentPositionData%N_a,currentPositionData%N_tri,triplets, &
                              currentEnergyData%interatomicDistances, oldTripDist)

    ! Re-calculate energy using RSG's code
    do i = 1, proposedPositionData%N_tri
      calculate = checkTripletDistsUnderMIC(tripDist(:,i),proposedPositionData,triplets(1,i),triplets(2,i),triplets(3,i))
      newTripEnergies_Ex(i) = energyCheckCalc(tripDist(:,i))
      if (calculate .eqv. .false.) then
        newTripEnergies_Ex(i) = 0d0
      end if
      calculate = checkTripletDistsUnderMIC(oldTripDist(:,i),currentPositionData,triplets(1,i),triplets(2,i),triplets(3,i))
      oldTripEnergies_Ex(i) = energyCheckCalc(oldTripDist(:,i))
      if (calculate .eqv. .false.) then
        oldTripEnergies_Ex(i) = 0d0
      end if
    end do

    ! Find the difference between the new and old triplet energies
    energy_Ex = sum(newTripEnergies_Ex)
    oldEnergy_Ex = sum(oldTripEnergies_Ex)

    getExpectedAtomMoveEnergy = energy_Ex - oldEnergy_Ex

  return
  end function getExpectedAtomMoveEnergy


  function getExpectedPosition(mover) result(expectedPosition)
    implicit none
    integer, intent(in) :: mover
    double precision :: expectedPosition(3)

    expectedPosition = currentPositionData%posArray(mover,:)
    ! Add seeded values of moves in each direction
    expectedPosition(1) = expectedPosition(1) + 0.40315380977949444
    expectedPosition(2) = expectedPosition(2) - 0.05015726548652677
    expectedPosition(3) = expectedPosition(3) + 0.17527585430106662

  return
  end function getExpectedPosition


end module test_regression


!====Actual simulation====
!Initialise box and energy
!(*)
!	Propose move <-Jack
!	Calculate change in energy<-Jack
!	Test exp( dU) to accept the move
!	If move accepted then carry out updates<-Jack
!Goto (*)


!====Test====
!Initialise box and energy
!(*)
!	Propose move
!	Calculate change in energy
!	Accept the move
!	If move accepted then carry out updates
!Goto (*)
